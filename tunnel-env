#!/usr/bin/env python
import errno
import os
import pickle
import pipes
import random
import re
import socket
import subprocess
import sys
import tempfile
import threading
import time
import urlparse

BASTION_PAT = re.compile(r'(.*?)_BASTIONS')
KEY_PAT = re.compile(r'(.*?)_BASTION_KEY')


class Tunnel(object):
    def __init__(self, bastion, envname, split_url):
        self.bastion = bastion
        self.envname = envname
        self.split_url = split_url

        # Find a valid local port to listen on, and hold the binding
        # until all all the bastions have been scanned.
        self.placeholder = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        while True:
            try:
                # Choose among IANA "ephemeral" ports.
                port = random.choice(xrange(49152, 65535))
                self.placeholder.bind(('127.0.0.1', port))
                break
            except EnvironmentError as e:
                if e.errno == errno.EADDRINUSE:
                    # That local is already assigned: try again.
                    continue
                raise

        self.rewrite_port = port

        # Compute rewritten url.
        rewrite = list(self.split_url)
        netloc = rewrite[1]
        if '@' in netloc:
            prefix, hostport = netloc.split('@')
            rewrite[1] = '{0}@127.0.0.1:{1}'.format(prefix, port)
        else:
            rewrite[1] = '127.0.0.1:{1}'.format(port)
        self.rewritten_url = urlparse.urlunsplit(rewrite)

        self.agent = SshAgent()
        self.agent.add_key(bastion.private_key)

    def start(self):
        self.placeholder.close()

        # Got an address and stored the port: free the port so it can
        # be used by SSH, now.  Race conditions are ignored as this is
        # intended to be the only program binding to sockets at the
        # time of execution.
        t = threading.Thread(target=self._supervise)
        t.daemon = True
        t.start()

    def _supervise(self):
        env = dict(**os.environ)
        env.update(self.agent.env)

        while True:
            ssh_p = subprocess.Popen(
                ['ssh',
                 '-NT',
                 '-Snone',
                 '-F/dev/null',
                 '-oStrictHostKeyChecking=no',
                 '-oUserKnownHostsFile=/dev/null',
                 '-oExitOnForwardFailure=yes',
                 '-L127.0.0.1:{0}:{1}:{2}'.format(self.rewrite_port,
                                                  self.split_url.hostname,
                                                  self.split_url.port),
                 'bastion@' + random.choice(self.bastion.bastions)],
                env=env)

            # SSH exited, that's expected to be rare.  Wait a
            # little and re-establish the tunnel.
            ssh_p.wait()
            time.sleep(10)


class Bastion(object):
    def __init__(self):
        self.private_key = None
        self.bastions = None
        self.tunnels = []


class SshAgent(object):
    def __init__(self):
        agent = subprocess.Popen(['ssh-agent', '-c'], stdout=subprocess.PIPE,
                                 close_fds=True)
        stdout, _ = agent.communicate()
        if agent.returncode != 0:
            raise 'ssh-agent failed to start successfully'

        env = {}
        for line in stdout.split('\n'):
            parts = line.rstrip('\n').split()
            if line.startswith('setenv SSH_AUTH_SOCK ') and len(parts) == 3:
                env['SSH_AUTH_SOCK'] = parts[-1].rstrip(';')
            elif line.startswith('setenv SSH_AGENT_PID ') and len(parts) == 3:
                env['SSH_AGENT_PID'] = parts[-1].rstrip(';')

        self.env = env

    def add_key(self, key):
        env_copy = dict(**os.environ)
        env_copy.update(self.env)
        with tempfile.NamedTemporaryFile() as f:
            f.write(key)
            f.flush()
            subprocess.check_call(['ssh-add', f.name], env=env_copy)


def sieve_bastions_and_clean_env():
    """Record bastions in os.environ and wipe them from the environ

    The keys in particular are wiped because traversal through the
    Linux procfs allows secrets held in environment variables to be
    read.

    """
    b_dict = dict()

    cleaned = []

    def clean(name):
        del os.environ[name]
        cleaned.append(name)

    for name, value in os.environ.items():
        m = BASTION_PAT.match(name)
        if m:
            b = b_dict.setdefault(m.group(1), Bastion())
            b.bastions = value.split(',')
            clean(name)
            continue

        m = KEY_PAT.match(name)
        if m:
            b = b_dict.setdefault(m.group(1), Bastion())
            b.private_key = value
            clean(name)
            continue

    return cleaned, b_dict


def sieve_tunnels(b_dict, env):
    for key, value in env.items():
        for stem, bastion in b_dict.items():
            if not key.startswith(stem):
                continue

            u = urlparse.urlsplit(value)
            if u.hostname and u.port:
                tun = Tunnel(bastion, key, u)
                bastion.tunnels.append(tun)


def main():
    # Perform a re-self-exec after cleaning environment variables as
    # to have a clean /proc/self/environ file.  That necessitates
    # serializing pertinent information through a file, which has its
    # file descriptor closed and is then unlinked to avoid it being
    # read by another process.

    if len(sys.argv) == 3:
        # Post-re-exec.  Read most data from the pickle dump.
        target_file = sys.argv[1]
        bastion_info_path = sys.argv[2]
        with open(bastion_info_path, 'rb') as f:
            cleaned, b_dict, original_environ = pickle.load(f)
        os.unlink(bastion_info_path)
        sieve_tunnels(b_dict, original_environ)
        f = tempfile.NamedTemporaryFile(delete=False)
        for clean in cleaned:
            f.write('unset {0};\n'.format(pipes.quote(clean)))

        for bastion in b_dict.values():
            for tun in bastion.tunnels:
                tun.start()
                assert '=' not in tun.envname
                f.write('export {0};\n'.format(
                    pipes.quote('{0}={1}'.format(
                        tun.envname, tun.rewritten_url))))
        f.close()
        os.rename(f.name, target_file)
    elif len(sys.argv) == 2:
        # Pre-exec execution, use a re-exec to clean /proc/<pid>/environ.
        original_environment = dict(**os.environ)
        cleaned, b_dict = sieve_bastions_and_clean_env()

        # Re-execution deletes this temporary file.
        f = tempfile.NamedTemporaryFile(delete=False)
        pickle.dump([cleaned, b_dict, original_environment], f)
        f.close()

        os.execve(sys.argv[0], sys.argv + [f.name], os.environ)
    else:
        print >>sys.stderr, ('Incorrect usage.\n'
                             'Usage: tunnel-env SHELL-OUTPUT [PICKLE-INPUT]')

    # Keep supervising tunnels and wait for a signal to end execution.
    while True:
        time.sleep(60)

if __name__ == '__main__':
    sys.exit(main())
